{"version":3,"sources":["shared/Autocomplete/AutocompleteList/AutocompleteList.tsx","shared/Autocomplete/Autocomplete.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AutocompleteList","props","autocompleteHints","handleClickAutocomleteItem","className","map","hint","tabIndex","onClick","name","onKeyPress","e","hintName","charCode","handleKeyPress","String","id","Autocomplete","React","useState","inputValue","setInputValue","data","setData","setAutocompleteHints","showAutocomplete","setShowAutocomplete","inputRef","useRef","useEffect","isMounted","a","fetch","response","json","fetchData","filter","user","toLowerCase","includes","ref","type","value","onChange","currentTarget","length","handleInputChange","current","focus","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAQaA,EAAqD,SAACC,GAAW,IACpEC,EAAkDD,EAAlDC,kBAAmBC,EAA+BF,EAA/BE,2BAW3B,OACE,oBAAIC,UAAU,oBAAd,SACGF,EAAkBG,KAAI,SAACC,GACtB,OACE,oBACEF,UAAU,0BACVG,SAAU,EAEVC,QAAS,kBAAML,EAA2BG,EAAKG,OAC/CC,WAAY,SAACC,GAAD,OAlBC,SACrBA,EACAC,GAEmB,KAAfD,EAAEE,UAAkC,KAAfF,EAAEE,UACzBV,EAA2BS,GAagCE,CAAeH,EAAGL,EAAKG,OAL9E,SAOGH,EAAKG,MAJDM,OAAOT,EAAKU,WCAhBC,EAAyB,WAAO,IAAD,EACNC,IAAMC,SAAiB,IADjB,mBACnCC,EADmC,KACvBC,EADuB,OAElBH,IAAMC,SAAsB,IAFV,mBAEnCG,EAFmC,KAE7BC,EAF6B,OAGQL,IAAMC,SAAsB,IAHpC,mBAGnCjB,EAHmC,KAGhBsB,EAHgB,OAIMN,IAAMC,UAAkB,GAJ9B,mBAInCM,EAJmC,KAIjBC,EAJiB,KAKpCC,EAAWT,IAAMU,OAAyB,MAEhDV,IAAMW,WAAU,WACd,IAAIC,GAAY,EAehB,OAde,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,8CADb,cACVC,EADU,gBAEGA,EAASC,OAFZ,OAEVZ,EAFU,OAGZQ,GACFP,EAAQD,GAJM,2CAAH,oDAQfa,GAEAX,EACEF,EAAKc,QAAO,SAACC,GAAD,OAAqBA,EAAK5B,KAAK6B,cAAcC,SAASnB,EAAWkB,mBAGxE,WACLR,GAAY,KAEb,CAACV,EAAYE,IAehB,OACE,gCACE,sBAAMlB,UAAU,cAAhB,SACE,uBACEoC,IAAKb,EACLc,KAAK,OACLC,MAAOtB,EACPhB,UAAU,qBACVuC,SAAU,SAAChC,GAAD,OArBQ,SAACA,GACzBU,EAAcV,EAAEiC,cAAcF,OAC9BhB,EAAoBf,EAAEiC,cAAcF,MAAMG,OAAS,GAmBSC,CAAkBnC,QAI1Ec,GACA,cAAC,EAAD,CACEvB,kBAAmBA,EACnBC,2BAvB2B,SAACuC,GAClCrB,EAAcqB,GACdhB,GAAoB,GAChBC,EAASoB,SACXpB,EAASoB,QAAQC,eCpDRC,MARf,WACE,OACE,qBAAK7C,UAAU,MAAf,SACE,cAAC,EAAD,OCOS8C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.017ee8b0.chunk.js","sourcesContent":["import React from 'react';\nimport { IUserData } from \"../Autocomplete\";\n\ninterface IAutocompleteListProps {\n  autocompleteHints: IUserData[];\n  handleClickAutocomleteItem: (value: string) => void;\n}\n\nexport const AutocompleteList: React.FC<IAutocompleteListProps> = (props) => {\n  const { autocompleteHints, handleClickAutocomleteItem } = props;\n\n  const handleKeyPress = (\n    e: React.KeyboardEvent<HTMLElement>,\n    hintName: string\n  ) => {\n    if (e.charCode === 13 || e.charCode === 32) {\n      handleClickAutocomleteItem(hintName);\n    }\n  };\n\n  return (\n    <ul className=\"autocomplete-list\">\n      {autocompleteHints.map((hint: IUserData) => {\n        return (\n          <li\n            className=\"autocomplete-list__item\"\n            tabIndex={0}\n            key={String(hint.id)}\n            onClick={() => handleClickAutocomleteItem(hint.name)}\n            onKeyPress={(e: React.KeyboardEvent<HTMLElement>) => handleKeyPress(e, hint.name)}\n          >\n            {hint.name}\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n","import React from 'react';\nimport { AutocompleteList } from '../Autocomplete/AutocompleteList';\n\nexport interface IUserData {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: {\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: number;\n    geo: {\n      lat: number;\n      lng: number;\n    },\n  },\n  phone: string;\n  website: string;\n  company: {\n    name: string;\n    catchPhrase: string;\n    bs: string;\n  },\n};\n\nexport const Autocomplete: React.FC = () => {\n  const [inputValue, setInputValue] = React.useState<string>('');\n  const [data, setData] = React.useState<IUserData[]>([]);\n  const [autocompleteHints, setAutocompleteHints] = React.useState<IUserData[]>([]);\n  const [showAutocomplete, setShowAutocomplete] = React.useState<Boolean>(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    let isMounted = true; \n    const fetchData = async () => {\n      const response = await fetch('https://jsonplaceholder.typicode.com/users');\n      const data = await response.json();\n      if (isMounted) { \n        setData(data);\n      }\n    }\n\n    fetchData();\n\n    setAutocompleteHints(\n      data.filter((user: IUserData) => user.name.toLowerCase().includes(inputValue.toLowerCase()))\n    );\n      \n    return () => {\n      isMounted = false;\n    };\n  }, [inputValue, data]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(e.currentTarget.value);\n    setShowAutocomplete(e.currentTarget.value.length > 0);\n  }\n\n  const handleClickAutocomleteItem = (value: string): void => {\n    setInputValue(value);\n    setShowAutocomplete(false);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }\n\n  return (\n    <div>\n      <form className=\"search-form\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={inputValue}\n          className=\"search-form__input\"\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(e)}\n        />\n      </form>\n      {\n        showAutocomplete &&\n        <AutocompleteList\n          autocompleteHints={autocompleteHints}\n          handleClickAutocomleteItem={handleClickAutocomleteItem}\n        />\n      }\n    </div>\n  )\n};\n","import React from 'react';\nimport './App.css';\nimport { Autocomplete } from './shared/Autocomplete';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Autocomplete />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}